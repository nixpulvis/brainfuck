var searchIndex = {};
searchIndex['brainfuck'] = {"items":[[3,"Interpreter","brainfuck","A brainfuck interpreter, with the needed state for execution.",null,null],[3,"Program","","The logic desired to be run by the brainfuck interpreter.",null,null],[4,"Error","","A general error type for problems inside of the interpreter.",null,null],[13,"Io","","Errors with reading or writing to IO.",0,null],[13,"Tape","","Errors with the underlying tape.",0,null],[13,"NoProgram","","No program loaded.",0,null],[13,"InvalidProgram","","Invalid program loaded.",0,null],[13,"CycleLimit","","Interpreter cycle limit hit.",0,null],[4,"Instruction","","An executable instruction in the language.",null,null],[13,"IncPtr","","Increment the pointer moving it up on the tape.",1,null],[13,"DecPtr","","Decrement the pointer moving it down on the tape.",1,null],[13,"IncVal","","Increment the value at the pointer on the tape.",1,null],[13,"DecVal","","Decrement the value at the pointer on the tape.",1,null],[13,"Output","","Write the value at the pointer as a `char` to `STDOUT`. This\ninstruction can fail if writing to the underlying writer fails.",1,null],[13,"Input","","Read from `STDIN` as a `char` to value at the pointer. This\ninstruction can fail if reading from the underlying reader\nfails or has no more data.",1,null],[13,"SkipForward","","Skip forward if the value at the pointer is `0`. For more\ninformation see the section on control flow above.",1,null],[13,"SkipBackward","","Skip backward if the value at the pointer is **not** `0`.\nFor more information see the section on control flow above.",1,null],[5,"eval","","Run the given program with STDIN and STDOUT as the IO buffers.",null,{"inputs":[{"name":"program"}],"output":{"name":"result"}}],[5,"eval_string","","Parse a program from the given string and `eval` it.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"eval_file","","Parse a program from the given file path and `eval` it.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"error"}}],[11,"default","","",2,{"inputs":[{"name":"interpreter"}],"output":{"name":"interpreter"}}],[11,"load","","Load a program for the interpreter to run.",2,{"inputs":[{"name":"interpreter"},{"name":"program"}],"output":{"name":"self"}}],[11,"read_from","","Use the given reader for the `Input` instruction.",2,{"inputs":[{"name":"interpreter"},{"name":"r"}],"output":{"name":"self"}}],[11,"write_to","","Use the given writer for the `Output` instruction.",2,{"inputs":[{"name":"interpreter"},{"name":"w"}],"output":{"name":"self"}}],[11,"run","","Run the interpreter.",2,{"inputs":[{"name":"interpreter"}],"output":{"name":"result"}}],[11,"run_with_callback","","Run the interpreter with a callback hook.",2,{"inputs":[{"name":"interpreter"},{"name":"f"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"instruction"},{"name":"instruction"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"instruction"},{"name":"instruction"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"instruction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"instruction"}],"output":{"name":"instruction"}}],[11,"fmt","","",1,{"inputs":[{"name":"instruction"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"program"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"parse","","Create a program from source text.",3,{"inputs":[{"name":"program"},{"name":"str"}],"output":{"name":"result"}}],[11,"get","","Get the instruction at the given program counter.",3,{"inputs":[{"name":"program"},{"name":"usize"}],"output":{"name":"option"}}],[11,"from_file","","Create a program from a file.",3,{"inputs":[{"name":"program"},{"name":"p"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"program"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"tape","","Brainfuck programs have the best underlying data structure.",null,null],[3,"VecTape","brainfuck::tape","A tape with dynamically allocated cells.",null,null],[3,"ArrayTape","","A tape with statically allocated cells.",null,null],[4,"Error","","The error type for dealing with tapes.",null,null],[13,"Overflow","","",4,null],[11,"default","","",5,{"inputs":[{"name":"vectape"}],"output":{"name":"self"}}],[11,"inc_val","","",5,{"inputs":[{"name":"vectape"}],"output":{"name":"result"}}],[11,"dec_val","","",5,{"inputs":[{"name":"vectape"}],"output":{"name":"result"}}],[11,"inc_ptr","","",5,{"inputs":[{"name":"vectape"}],"output":{"name":"result"}}],[11,"dec_ptr","","",5,{"inputs":[{"name":"vectape"}],"output":{"name":"result"}}],[11,"deref","","",5,{"inputs":[{"name":"vectape"}],"output":{"name":"target"}}],[11,"deref_mut","","",5,{"inputs":[{"name":"vectape"}],"output":{"name":"u8"}}],[11,"default","","",6,{"inputs":[{"name":"arraytape"}],"output":{"name":"self"}}],[11,"inc_val","","",6,{"inputs":[{"name":"arraytape"}],"output":{"name":"result"}}],[11,"dec_val","","",6,{"inputs":[{"name":"arraytape"}],"output":{"name":"result"}}],[11,"inc_ptr","","",6,{"inputs":[{"name":"arraytape"}],"output":{"name":"result"}}],[11,"dec_ptr","","",6,{"inputs":[{"name":"arraytape"}],"output":{"name":"result"}}],[11,"deref","","",6,{"inputs":[{"name":"arraytape"}],"output":{"name":"target"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"arraytape"}],"output":{"name":"u8"}}],[17,"TAPE_LENGTH","","The number of cells a portable tape contains. Attempts to access above or\nbelow this limit will result in an error.",null,null],[8,"Tape","","An interface for the underlying data for brainfuck. Tapes are\nconceptually a sequential list of cells, who's values can be\nrepresented as bytes.",null,null],[16,"Cell","","The underlying cell type, that holds the data. This value when\ndereferenced will need to be converted to a `u8`.",7,null],[10,"inc_val","","Increment the value of the current cell by 1.",7,{"inputs":[{"name":"tape"}],"output":{"name":"result"}}],[10,"dec_val","","Decrement the value of the current cell by 1.",7,{"inputs":[{"name":"tape"}],"output":{"name":"result"}}],[10,"inc_ptr","","Increment the location of the pointer by 1 cell.",7,{"inputs":[{"name":"tape"}],"output":{"name":"result"}}],[10,"dec_ptr","","Decrement the location of the pointer by 1 cell.",7,{"inputs":[{"name":"tape"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",4,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[17,"CYCLE_LIMIT","brainfuck","The number of instructions allowed to execute before the interpreter\nerrors with `Error::CycleLimit`.",null,null]],"paths":[[4,"Error"],[4,"Instruction"],[3,"Interpreter"],[3,"Program"],[4,"Error"],[3,"VecTape"],[3,"ArrayTape"],[8,"Tape"]]};
initSearch(searchIndex);
